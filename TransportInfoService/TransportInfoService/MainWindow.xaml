<Window x:Class="TransportInfoService.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:TransportInfoService"
        xmlns:MyRes="clr-namespace:TransportInfoService.Resources"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        mc:Ignorable="d"
        Title="{x:Static MyRes:Texts.MainWindowName}" Height="700" Width="1200" ResizeMode="CanMinimize" Icon="Resources/Icons/MainWindowIcon.ico">
    <Window.Resources>
        <Storyboard x:Key="LoadingAnimationStoryBoard" RepeatBehavior="Forever">
            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="SearchDataAnimatedEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="360"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="ApplyingOfFiltersAnimationStoryBoard" RepeatBehavior="Forever">
            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="ApplyingOfFiltersAnimatedEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="360"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="WaitForLoginOrRegistrationAnimationStoryBoard" RepeatBehavior="Forever">
            <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="WaitForEndOfRegistrationOrLoginAnimatedEllipse" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                <SplineDoubleKeyFrame KeyTime="00:00:02" Value="360"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>
    </Window.Resources>
    <DockPanel>
        <StackPanel HorizontalAlignment="Center" VerticalAlignment="Top">
            <WrapPanel>
                <StackPanel>
                    <Label Content="{x:Static MyRes:Texts.LabelDepartureStation}"></Label>
                    <ComboBox IsEnabled="{Binding ControlsMustBeEnabled, Mode=TwoWay}" Name="DepartureStationComboBox" Width="250" ItemsSource="{Binding ListOfStations, Mode=OneWay}"  IsEditable="True" IsTextSearchEnabled="True" Foreground="{Binding ForegroundDepartureStationComboBox, Mode=TwoWay}" Text="{Binding DepartureStationComboBoxText, Mode=TwoWay}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanged">
                                <ei:CallMethodAction TargetObject="{Binding}"  MethodName="SelectionChangedEventHandlerForComboBoxesWithStations"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="PreviewTextInput">
                                <ei:CallMethodAction TargetObject="{Binding}"  MethodName="PreviewTextInputForComboBoxesWithStations"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="DropDownOpened">
                                <ei:CallMethodAction TargetObject="{Binding}"  MethodName="DropDownOpenedEventHandlerForComboBoxesWithStations"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="DropDownClosed">
                                <ei:CallMethodAction TargetObject="{Binding}"  MethodName="DropDownClosedEventHandlerForComboBoxesWithStations"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                        <ComboBox.Style>
                            <Style>
                                <EventSetter Event="TextBox.TextChanged" Handler="TextChangedEventHandlerForComboBoxesWithStations"></EventSetter>
                            </Style>
                        </ComboBox.Style>
                    </ComboBox>
                    <Label Content="{ x:Static MyRes:Texts.LabelsStationNotFound}" Visibility="{Binding VisibilityForLabelDepartureStationNotFound, Mode=TwoWay}" Foreground="Red"></Label>
                </StackPanel>
                <StackPanel Margin="25,0,0,0">
                    <StackPanel>
                        <Label Content="{x:Static MyRes:Texts.LabelDestinationStation}"></Label>
                        <ComboBox IsEnabled="{Binding ControlsMustBeEnabled, Mode=TwoWay}" Name="DestinationStationComboBox" ItemsSource="{Binding ListOfStations, Mode=OneWay}" Width="250" IsEditable="True" IsTextSearchEnabled="True" Foreground="{Binding ForegroundDestinationStationComboBox, Mode=TwoWay}" Text="{Binding DestinationStationComboBoxText, Mode=TwoWay}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="SelectionChanged">
                                    <ei:CallMethodAction TargetObject="{Binding}"  MethodName="SelectionChangedEventHandlerForComboBoxesWithStations"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="PreviewTextInput">
                                    <ei:CallMethodAction TargetObject="{Binding}"  MethodName="PreviewTextInputForComboBoxesWithStations"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="DropDownOpened">
                                    <ei:CallMethodAction TargetObject="{Binding}"  MethodName="DropDownOpenedEventHandlerForComboBoxesWithStations"/>
                                </i:EventTrigger>
                                <i:EventTrigger EventName="DropDownClosed">
                                    <ei:CallMethodAction TargetObject="{Binding}"  MethodName="DropDownClosedEventHandlerForComboBoxesWithStations"/>
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <ComboBox.Style>
                                <Style>
                                    <EventSetter Event="TextBox.TextChanged" Handler="TextChangedEventHandlerForComboBoxesWithStations"></EventSetter>
                                </Style>
                            </ComboBox.Style>
                        </ComboBox>
                        <Label Content="{ x:Static MyRes:Texts.LabelsStationNotFound}" Visibility="{Binding VisibilityForLabelDestinationStationNotFound, Mode=TwoWay}" Foreground="Red"></Label>
                    </StackPanel>
                </StackPanel>
                <StackPanel>
                    <CheckBox Name="AllDaysCheckBox" IsEnabled="{Binding ControlsMustBeEnabled, Mode=TwoWay}" Content="{x:Static MyRes:Texts.CheckBoxAllDays}" IsChecked="{Binding CheckBoxAllDaysIsChecked, Mode=TwoWay}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Checked">
                                <ei:CallMethodAction TargetObject="{Binding}"  MethodName="EventHandlerForCheckedEventOfCheckBoxAllDays"/>
                            </i:EventTrigger>
                            <i:EventTrigger EventName="Unchecked">
                                <ei:CallMethodAction TargetObject="{Binding}"  MethodName="EventHandlerForUncheckedEventOfCheckBoxAllDays"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </CheckBox>
                    <Calendar IsEnabled="{Binding ControlsMustBeEnabled, Mode=TwoWay}" SelectedDate="{Binding SelectedDateInCalendarControl, Mode=TwoWay}" Visibility="{Binding VisibilityForCalendarControl, Mode=TwoWay}"></Calendar>
                </StackPanel>
                <Button IsEnabled="{Binding ControlsMustBeEnabled, Mode=TwoWay}" Margin="0,20,0,0" VerticalAlignment="Top" FontSize="16" Content="{x:Static MyRes:Texts.ButtonSearchTrains}" Visibility="{Binding VisibilityForSearchTrainsButton, Mode=TwoWay}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="Click">
                            <ei:CallMethodAction TargetObject="{Binding}"  MethodName="ClickEventHandlerForSearchTrainsButton"/>
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </Button>
            </WrapPanel>
            <WrapPanel HorizontalAlignment="Center">
                <Label Visibility="{Binding VisibilityForLabelSearchFailBecauseDepartureAndDestinationStationsAreEqual, Mode=TwoWay}" Content="{ x:Static MyRes:Texts.LabelDepartueAndDestinationStationsAreEqual}"  Foreground="Red"></Label>
            </WrapPanel>
            <WrapPanel HorizontalAlignment="Center">
                <Label Name="ProgramStateLabel" Content="{Binding ProgramStateLabelContent}" Foreground="{Binding ForegroundProgramStateLabel, Mode=TwoWay}"></Label>
                <Ellipse Visibility="{Binding VisibilityForSearchDataAnimatedEllipse, Mode=TwoWay}"  Name="SearchDataAnimatedEllipse" Width="20" Height="20"  StrokeThickness="5" RenderTransformOrigin="0.5,0.5">
                    <Ellipse.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform/>
                            <SkewTransform/>
                            <RotateTransform/>
                        </TransformGroup>
                    </Ellipse.RenderTransform>
                    <Ellipse.Stroke>
                        <LinearGradientBrush EndPoint="0.445,0.997" StartPoint="0.555,0.003">
                            <GradientStop Color="White" Offset="0"/>
                            <GradientStop Color="#FF1AB48A" Offset="1"/>
                        </LinearGradientBrush>
                    </Ellipse.Stroke>
                    <i:Interaction.Triggers>
                        <ei:DataTrigger Binding="{Binding SearchDataAnimatedEllipseMustBeAnimated, Mode=TwoWay}" Value="true">
                            <ei:ControlStoryboardAction Storyboard="{StaticResource LoadingAnimationStoryBoard}" ControlStoryboardOption="Play"/>
                        </ei:DataTrigger>
                        <ei:DataTrigger Binding="{Binding SearchDataAnimatedEllipseMustBeAnimated, Mode=TwoWay}" Value="false">
                            <ei:ControlStoryboardAction Storyboard="{StaticResource LoadingAnimationStoryBoard}" ControlStoryboardOption="Stop"/>
                        </ei:DataTrigger>
                    </i:Interaction.Triggers>
                </Ellipse>
            </WrapPanel>
            <WrapPanel HorizontalAlignment="Right">
                <WrapPanel HorizontalAlignment="Center"  Visibility="{Binding ViewModelForTrainFilters.VisibilityForAnimatedEclipseForApplyingFilters}">
                    <Label Name="LabelApplyingFilters" Content="{ x:Static MyRes:Texts.LabelApplyingOfFilters}" Foreground="Orange"></Label>
                    <Ellipse Name="ApplyingOfFiltersAnimatedEllipse" Width="20" Height="20"  StrokeThickness="5" RenderTransformOrigin="0.5,0.5">
                        <Ellipse.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform/>
                            </TransformGroup>
                        </Ellipse.RenderTransform>
                        <Ellipse.Stroke>
                            <LinearGradientBrush EndPoint="0.445,0.997" StartPoint="0.555,0.003">
                                <GradientStop Color="White" Offset="0"/>
                                <GradientStop Color="#FF1AB48A" Offset="1"/>
                            </LinearGradientBrush>
                        </Ellipse.Stroke>
                        <i:Interaction.Triggers>
                            <ei:DataTrigger Binding="{Binding ViewModelForTrainFilters.ApplyingFiltersEllipseMustBeAnimated, Mode=TwoWay}" Value="true">
                                <ei:ControlStoryboardAction Storyboard="{StaticResource ApplyingOfFiltersAnimationStoryBoard}" ControlStoryboardOption="Play"/>
                            </ei:DataTrigger>
                            <ei:DataTrigger Binding="{Binding ViewModelForTrainFilters.ApplyingFiltersEllipseMustBeAnimated, Mode=TwoWay}" Value="false">
                                <ei:ControlStoryboardAction Storyboard="{StaticResource ApplyingOfFiltersAnimationStoryBoard}" ControlStoryboardOption="Stop"/>
                            </ei:DataTrigger>
                        </i:Interaction.Triggers>
                    </Ellipse>
                </WrapPanel>
                <DataGrid Name="FoundTrainsDataGrid" MaxWidth="750" MaxHeight="400" ItemsSource="{Binding ViewModelForTrainFilters.ListOfFoundTrainsForDataGridWhichContainsFoundTrainsWithDaysOfCruising, Mode=OneWay}" Visibility="{Binding VisibilityForFoundTrainsDataGrid, Mode=TwoWay}" AutoGenerateColumns="True" IsReadOnly="True" CanUserResizeColumns="False" CanUserResizeRows="False">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="AutoGeneratingColumn">
                            <ei:CallMethodAction TargetObject="{Binding}"  MethodName="AutoGeneratingColumnEventHandlerForFoundTrainsDataGrid" />
                        </i:EventTrigger>
                        <ei:DataTrigger Binding="{Binding LoadedTrainsWithDaysOfCruising, Mode=TwoWay}" Value="false">
                            <ei:ChangePropertyAction PropertyName="ItemsSource" Value="null"  TargetName="FoundTrainsDataGrid"></ei:ChangePropertyAction>
                            <ei:ChangePropertyAction PropertyName="ItemsSource" Value="{Binding ViewModelForTrainFilters.ListOfFoundTrainsForDataGridWhichContainsFoundTrainsWithoutDaysOfCruising, Mode=OneWay}"  TargetName="FoundTrainsDataGrid"></ei:ChangePropertyAction>
                        </ei:DataTrigger>
                        <ei:DataTrigger Binding="{Binding LoadedTrainsWithDaysOfCruising, Mode=TwoWay}" Value="true">
                            <ei:ChangePropertyAction PropertyName="ItemsSource" Value="null"  TargetName="FoundTrainsDataGrid"></ei:ChangePropertyAction>
                            <ei:ChangePropertyAction PropertyName="ItemsSource" Value="{Binding ViewModelForTrainFilters.ListOfFoundTrainsForDataGridWhichContainsFoundTrainsWithDaysOfCruising, Mode=OneWay}"  TargetName="FoundTrainsDataGrid"></ei:ChangePropertyAction>
                        </ei:DataTrigger>
                    </i:Interaction.Triggers>
                </DataGrid>
                <StackPanel Visibility="{Binding ViewModelForTrainFilters.VisibilityForTrainFilters, Mode=TwoWay}" IsEnabled="{Binding ViewModelForTrainFilters.FiltersMustBeEnabled, Mode=TwoWay}">
                    <Label Content="{x:Static MyRes:Texts.LabelTrainFilters}" Foreground="Blue"></Label>
                    <Label Content="{x:Static MyRes:Texts.LabelTrainTimeFilters}" Foreground="Magenta"></Label>
                    <TabControl>
                        <TabItem Header="{x:Static MyRes:Texts.TabItemDepartureTime}">
                            <StackPanel>
                                <CheckBox Name="DepartureTimeMorningCheckBox" Content="{x:Static MyRes:Texts.CheckBoxesMorning}" IsChecked="{Binding ViewModelForTrainFilters.DepartureTimeCheckBoxMorningIsChecked, Mode=TwoWay}">
                                </CheckBox>
                                <CheckBox Name="DepartureTimeDayCheckBox" Content="{x:Static MyRes:Texts.CheckBoxesDay}" IsChecked="{Binding ViewModelForTrainFilters.DepartureTimeCheckBoxDayIsChecked, Mode=TwoWay}">
                                </CheckBox>
                                <CheckBox Name="DepartureTimeEveningCheckBox" Content="{x:Static MyRes:Texts.CheckBoxesEvening}" IsChecked="{Binding ViewModelForTrainFilters.DepartureTimeCheckBoxEveningIsChecked, Mode=TwoWay}">
                                </CheckBox>
                                <CheckBox Name="DepartureTimeNightCheckBox" Content="{x:Static MyRes:Texts.CheckBoxesNight}" IsChecked="{Binding ViewModelForTrainFilters.DepartureTimeCheckBoxNightIsChecked, Mode=TwoWay}">
                                </CheckBox>
                            </StackPanel>
                        </TabItem>
                        <TabItem Header="{x:Static MyRes:Texts.TabItemDestinationTime}">
                            <StackPanel>
                                <CheckBox Name="ArrivalTimeMorningCheckBox" Content="{x:Static MyRes:Texts.CheckBoxesMorning}" IsChecked="{Binding ViewModelForTrainFilters.ArrivalTimeCheckBoxMorningIsChecked, Mode=TwoWay}">
                                </CheckBox>
                                <CheckBox Name="ArrivalTimeDayCheckBox" Content="{x:Static MyRes:Texts.CheckBoxesDay}" IsChecked="{Binding ViewModelForTrainFilters.ArrivalTimeCheckBoxDayIsChecked, Mode=TwoWay}">
                                </CheckBox>
                                <CheckBox Name="ArrivalTimeEveningCheckBox" Content="{x:Static MyRes:Texts.CheckBoxesEvening}" IsChecked="{Binding ViewModelForTrainFilters.ArrivalTimeCheckBoxEveningIsChecked, Mode=TwoWay}">
                                </CheckBox>
                                <CheckBox Name="ArrivalTimeNightCheckBox" Content="{x:Static MyRes:Texts.CheckBoxesNight}" IsChecked="{Binding ViewModelForTrainFilters.ArrivalTimeCheckBoxNightIsChecked, Mode=TwoWay}">
                                </CheckBox>
                            </StackPanel>
                        </TabItem>
                    </TabControl>
                    <Label Foreground="Magenta"  Content="{x:Static MyRes:Texts.LabelTrainTypeFilters}"></Label>
                    <CheckBox Name="TrainTypeEconomCheckBox" Content="{ x:Static MyRes:Texts.CheckBoxTrainTypeEconom}" IsChecked="{Binding ViewModelForTrainFilters.EconomTrainTypeCheckBoxIsChecked, Mode=TwoWay}">

                    </CheckBox>
                    <CheckBox Name="TrainTypeBusinessCheckBox" Content="{ x:Static MyRes:Texts.CheckBoxTrainTypeBusiness}" IsChecked="{Binding ViewModelForTrainFilters.BusinessTrainTypeCheckBoxIsChecked, Mode=TwoWay}">

                    </CheckBox>
                    <Button Content="{x:Static MyRes:Texts.ButtonApplyFiltersForTrains}">
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="Click">
                                <ei:CallMethodAction TargetObject="{Binding}"  MethodName="ClickEventHandlerForApplyFiltersButton"/>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Button>
                </StackPanel>
                <StackPanel>
                    <StackPanel IsEnabled="{Binding ControlsMustBeEnabled, Mode=TwoWay}" Visibility="{Binding ViewModelForBookingStackPanel.VisibilityForBookingStackPanel, Mode=TwoWay}">
                        <Label Content="{x:Static MyRes:Texts.LabelBookingHeader}" Foreground="Blue"></Label>
                        <StackPanel Visibility="{Binding ViewModelForBookingStackPanel.VisibilityForLoginAndRegistrationControls, Mode=TwoWay}">
                            <Label Content="{x:Static MyRes:Texts.LabelYouMustLoginBeforeStartBooking}" Foreground="Red"></Label>
                            <TabControl>
                                <TabItem Header="{x:Static MyRes:Texts.TabItemLogInSystem}">
                                    <StackPanel>
                                        <Label Content="{x:Static MyRes:Texts.LabelEnterLogin}"></Label>
                                        <TextBox Text="{Binding ViewModelForBookingStackPanel.LoginInLoginTextBox, Mode=TwoWay}"></TextBox>
                                        <Label Content="{x:Static MyRes:Texts.LabelEnterPassword}"></Label>
                                        <PasswordBox Name="LoginPasswordBox">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="PasswordChanged">
                                                    <ei:CallMethodAction TargetObject="{Binding ViewModelForBookingStackPanel}"  MethodName="PasswordChangedEventHandlerForAllPasswordBoxes"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </PasswordBox>
                                        <Button Content="{x:Static MyRes:Texts.ButtonLogIn}" HorizontalAlignment="Center">
                                        </Button>
                                    </StackPanel>
                                </TabItem>
                                <TabItem Header="{x:Static MyRes:Texts.TabItemRegistrationSystem}">
                                    <StackPanel>
                                        <Label Content="{x:Static MyRes:Texts.LabelTypeNewLogin}"></Label>
                                        <Label Content="{Binding ViewModelForBookingStackPanel.ContentOfLabelRegistrationFailedBecauseOfLogin, Mode=TwoWay}" Visibility="{Binding ViewModelForBookingStackPanel.VisibilityForLabelRegistrationFailedBecauseOfLogin, Mode=TwoWay}" Foreground="Red"></Label>
                                        <TextBox Text="{Binding ViewModelForBookingStackPanel.LoginInRegistrationTextBox, Mode=TwoWay}"></TextBox>
                                        <Label Content="{x:Static MyRes:Texts.LabelTypeEmail}"></Label>
                                        <Label Content="{Binding ViewModelForBookingStackPanel.ContentOfLabelRegistrationFailedDuringEmailValidation, Mode=TwoWay}" Visibility="{Binding ViewModelForBookingStackPanel.VisibilityForLabelRegistrationFailedDuringEmailValidation, Mode=TwoWay}" Foreground="Red"></Label>
                                        <TextBox Text="{Binding ViewModelForBookingStackPanel.EmailInRegistrationTextBox, Mode=TwoWay}"></TextBox>
                                        <Label Content="{x:Static MyRes:Texts.LabelTypePasswordFirstTime}"></Label>
                                        <Label Content="{Binding ViewModelForBookingStackPanel.ContentOfFirstLabelRegistrationFailedDuringPasswordValidation, Mode=TwoWay}" Visibility="{Binding ViewModelForBookingStackPanel.VisibilityForFirstLabelRegistrationFailedDuringPasswordValidation, Mode=TwoWay}" Foreground="Red"></Label>
                                        <PasswordBox Name="FirstRegistrationPasswordBox">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="PasswordChanged">
                                                    <ei:CallMethodAction TargetObject="{Binding ViewModelForBookingStackPanel}"  MethodName="PasswordChangedEventHandlerForAllPasswordBoxes"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </PasswordBox>
                                        <Label Content="{x:Static MyRes:Texts.LabelTypePasswordSecondTime}"></Label>
                                        <Label Content="{Binding ViewModelForBookingStackPanel.ContentOfSecondLabelRegistrationFailedDuringPasswordValidation, Mode=TwoWay}" Visibility="{Binding ViewModelForBookingStackPanel.VisibilityForSecondLabelRegistrationFailedDuringPasswordValidation, Mode=TwoWay}" Foreground="Red"></Label>
                                        <PasswordBox Name="SecondRegistrationPasswordBox">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="PasswordChanged">
                                                    <ei:CallMethodAction TargetObject="{Binding ViewModelForBookingStackPanel}"  MethodName="PasswordChangedEventHandlerForAllPasswordBoxes"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </PasswordBox>
                                        <Button HorizontalAlignment="Center" Content="{x:Static MyRes:Texts.ButtonStartRegistration}">
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="Click">
                                                    <ei:CallMethodAction TargetObject="{Binding}"  MethodName="ClickEventHandlerForRegisterButton"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </Button>
                                    </StackPanel>
                                </TabItem>
                            </TabControl>
                        </StackPanel>
                    </StackPanel>
                    <StackPanel Visibility="{Binding ViewModelForBookingStackPanel.VisibilityForStackPanelWithWaitAnimationForLoginAndRegistration, Mode=TwoWay}">
                        <Label></Label>
                        <Ellipse Name="WaitForEndOfRegistrationOrLoginAnimatedEllipse" Width="20" Height="20"  StrokeThickness="5" RenderTransformOrigin="0.5,0.5">
                            <Ellipse.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform/>
                                </TransformGroup>
                            </Ellipse.RenderTransform>
                            <Ellipse.Stroke>
                                <LinearGradientBrush EndPoint="0.445,0.997" StartPoint="0.555,0.003">
                                    <GradientStop Color="White" Offset="0"/>
                                    <GradientStop Color="#FF1AB48A" Offset="1"/>
                                </LinearGradientBrush>
                            </Ellipse.Stroke>
                            <i:Interaction.Triggers>
                                <ei:DataTrigger Binding="{Binding ViewModelForTrainFilters.ApplyingFiltersEllipseMustBeAnimated, Mode=TwoWay}" Value="true">
                                    <ei:ControlStoryboardAction Storyboard="{StaticResource WaitForLoginOrRegistrationAnimationStoryBoard}" ControlStoryboardOption="Play"/>
                                </ei:DataTrigger>
                                <ei:DataTrigger Binding="{Binding ViewModelForTrainFilters.ApplyingFiltersEllipseMustBeAnimated, Mode=TwoWay}" Value="false">
                                    <ei:ControlStoryboardAction Storyboard="{StaticResource WaitForLoginOrRegistrationAnimationStoryBoard}" ControlStoryboardOption="Stop"/>
                                </ei:DataTrigger>
                            </i:Interaction.Triggers>
                        </Ellipse>
                    </StackPanel>
                </StackPanel>
            </WrapPanel>
        </StackPanel>
    </DockPanel>
</Window>
